name: Durango FTP dev mode

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  winrt-build:
    runs-on: windows-latest

    env:
      SolutionPath: UniversalFtpServer.sln
      Platform: x64
      Configuration: Release
      AppxBundle: Never
      PackageOutputRootDir: UniversalFtpServer

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        
    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1.0.2
      
    - name: Setup NuGet.exe for use with actions
      uses: NuGet/setup-nuget@v1
      with:
        nuget-version: latest  
        
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      shell: bash
      
    - name: NuGet restore
      run: |
        nuget restore
        
    - name: Generate Self-Signed Certificate
      id: generate_cert
      run: |
        $cert = New-SelfSignedCertificate -CertStoreLocation "Cert:\CurrentUser\My" -Subject "CN=MyUWPCert" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -NotAfter (Get-Date).AddYears(1) -Type CodeSigningCert
        echo "THUMBPRINT=$($cert.Thumbprint)" >> $GITHUB_ENV
      shell: powershell

    - name: Build project
      run: |
        msbuild `
          "$env:SolutionPath" `
          /p:OutputPath=output `
          /p:Platform=$env:Platform `
          /p:Configuration=$env:Configuration `
          /p:AppxBundlePlatforms="x64" `
          /p:AppxPackageDir="$env:PackageOutputRootDir" `
          /p:AppxBundle=$env:AppxBundle `
          /p:UapAppxPackageBuildMode="Sideload" `
          /p:AppxPackageSigningEnabled=true `
          /p:PackageCertificateThumbprint=${{ env.THUMBPRINT }}
      shell: powershell

    - name: Clean the Package
      run: |
        $PackagePath = "${{ env.PackageOutputRootDir }}"
        if (Test-Path $PackagePath) {
          Write-Host "Cleaning package directory: $PackagePath"
          Remove-Item -Recurse -path "$PackagePath\Add-AppDevPackage.resources" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -path "$PackagePath\TelemetryDependencies" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -path "$PackagePath\Dependencies\arm" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -path "$PackagePath\Dependencies\arm64" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -path "$PackagePath\Dependencies\x86" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -path "$PackagePath\Dependencies\Win32" -ErrorAction SilentlyContinue
          Remove-Item -path "$PackagePath\Add-AppDevPackage.ps1" -ErrorAction SilentlyContinue
          Remove-Item -Recurse -path "$PackagePath\Install.ps1" -ErrorAction SilentlyContinue
        } else {
          Write-Host "Package path does not exist: $PackagePath"
          exit 1
        }
      shell: powershell

    - name: Create Archive
      run: |
        $PackagePath = "${{ env.PackageOutputRootDir }}"
        if (Test-Path $PackagePath) {
          Write-Host "Creating archive for: $PackagePath"
          Compress-Archive -Path "$PackagePath\*" -DestinationPath "${{ env.PackageOutputRootDir }}\DURANGO-FTP-Release.zip"
          Write-Host "Contents of package output directory after archiving:"
          Get-ChildItem -Path "${{ env.PackageOutputRootDir }}" -Recurse
        } else {
          Write-Host "Package path does not exist for archiving: $PackagePath"
          exit 1
        }
      shell: powershell

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        name: DURANGO-FTP-Release
        path: ${{ env.PackageOutputRootDir }}\DURANGO-FTP-Release.zip
